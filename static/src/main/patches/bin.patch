diff -rupN shibboleth-idp/bin/aacli.bat shibboleth-idp/bin/aacli.bat
--- shibboleth-idp/bin/aacli.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/aacli.bat	2019-07-01 13:03:37.377963985 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
-"%~dp0\runclass.bat" -Dnet.shibboleth.idp.cli.arguments=net.shibboleth.idp.cli.ResolverTestArguments net.shibboleth.idp.cli.CLI %*
+@echo off
+setlocal
+
+"%~dp0\runclass.bat" -Dnet.shibboleth.idp.cli.arguments=net.shibboleth.idp.cli.ResolverTestArguments net.shibboleth.idp.cli.CLI %*
diff -rupN shibboleth-idp/bin/ant.bat shibboleth-idp/bin/ant.bat
--- shibboleth-idp/bin/ant.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/ant.bat	2019-07-01 13:03:37.377963985 -0400
@@ -1,34 +1,34 @@
-@echo off
-setlocal
-
-REM Find the necessary resources
-set ANT_HOME=%~dp0
-
-REM strip trailing backslash - it confuses java.
-REM do it like this because embedding the strip inside an if causes problems if the name has a ")" in it. 
-if "%ANT_HOME:~-1%" NEQ "\" (
-   goto nostrip
-)
-set ANT_HOME=%ANT_HOME:~0,-1%
-:nostrip
-
-REM We need a JVM
-if not defined JAVA_HOME  (
-  echo Error: JAVA_HOME is not defined.
-  exit /b
-)
-
-if not defined JAVACMD (
-  set JAVACMD="%JAVA_HOME%\bin\java.exe"
-)
-
-if not exist %JAVACMD% (
-  echo Error: JAVA_HOME is not defined correctly.
-  echo Cannot execute %JAVACMD%
-  exit /b
-)
-
-REM add in the dependency .jar files
-set LOCALCLASSPATH=%ANT_HOME%\..\bin\lib\*;%ANT_HOME%\..\webapp\WEB-INF\lib\*;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\classes.zip;%CLASSPATH%
-
+@echo off
+setlocal
+
+REM Find the necessary resources
+set ANT_HOME=%~dp0
+
+REM strip trailing backslash - it confuses java.
+REM do it like this because embedding the strip inside an if causes problems if the name has a ")" in it. 
+if "%ANT_HOME:~-1%" NEQ "\" (
+   goto nostrip
+)
+set ANT_HOME=%ANT_HOME:~0,-1%
+:nostrip
+
+REM We need a JVM
+if not defined JAVA_HOME  (
+  echo Error: JAVA_HOME is not defined.
+  exit /b
+)
+
+if not defined JAVACMD (
+  set JAVACMD="%JAVA_HOME%\bin\java.exe"
+)
+
+if not exist %JAVACMD% (
+  echo Error: JAVA_HOME is not defined correctly.
+  echo Cannot execute %JAVACMD%
+  exit /b
+)
+
+REM add in the dependency .jar files
+set LOCALCLASSPATH=%ANT_HOME%\..\bin\lib\*;%ANT_HOME%\..\webapp\WEB-INF\lib\*;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\classes.zip;%CLASSPATH%
+
 %JAVACMD% -cp "%LOCALCLASSPATH%" -Dant.home="%ANT_HOME%" %ANT_OPTS% org.apache.tools.ant.Main -e -q -f "%ANT_HOME%/build.xml" %*
\ No newline at end of file
diff -rupN shibboleth-idp/bin/ant-jetty.xml shibboleth-idp/bin/ant-jetty.xml
--- shibboleth-idp/bin/ant-jetty.xml	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/ant-jetty.xml	2019-07-01 13:03:37.377963985 -0400
@@ -1,113 +1,113 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="Shibboleth IdP V3 - Jetty Container" basedir=".." default="install">
-
-    <!--  This file is for automatic configuration of Jetty, primarily from the MSI installer.
-
-       	Names and APIS *may* change in the future, please enter an RFI if you wish to use this
-       	in production outside the MSI installer.
-
-        TARGETS:
-
-        	The only top level target is "install".  This in turn calls subsidiary targets.
-
-        PROPERTIES:
-
-            The following properties are used.  They have to be provided on the command line or
-            via the property file.
-
-            jetty.property.file: Name of a file to fill in all or some of the below. This file is deleted after processing.
-            jetty.merge.properties: The name of a property file to merge with idp.ini.  This file is deleted after processing.
-            idp.host.name: The host name.
-            idp.uri.subject.alt.name: If we are creating certificates.
-            idp.target.dir: where to install to.
-
-            idp.keystore.password: password to use on the PKCS12 file for a user-facing TLS credential,
-                which will be created if one does not already exist either in JKS or PKCS12 form.
-                This value must also have been written to the merge properties file as
-                jetty.browser.keystore.password.
-
-            jetty.no.tidy: Do not delete the two above files (debug only)
-
-    -->
-
-    <taskdef resource="net/shibboleth/idp/installer/ant.xml" />
-
-    <target name="install" depends="init, properties, keystores, directories, copyinis, reprotect, tidy" />
-
-    <target name="init">
-        <tstamp />
-        <hostinfo />
-    </target>
-
-    <target name="properties">
-        <property file="${jetty.property.file}" />
-        <available property="idp.ini.present" file="${idp.target.dir}/jetty-base/start.d/idp.ini" />
-        <available property="idp.jks.present" file="${idp.target.dir}/credentials/idp.jks" />
-        <available property="idp.userfacing.p12.present" file="${idp.target.dir}/credentials/idp-userfacing.p12" />
-        <condition property="generate.userfacing.p12">
-            <!-- Generate the pkcs12 keystore if neither the JKS nor the P12 exist -->
-            <not>
-                <or>
-                    <istrue value="${idp.jks.present}" />
-                    <istrue value="${idp.userfacing.p12.present}" />
-                </or>
-            </not>
-        </condition>
-    </target>
-
-    <!-- Handle keystores -->
-    <target name="keystores" depends="jks, gen-userfacing" />
-
-    <target name="jks" if="idp.jks.present">
-      	<!-- Note that this password is the old default for QI.  This will overwrite what we may have put in when the merge file was created. -->
-      	<echo file="${jetty.merge.properties}" append="yes">
-        	jetty.backchannel.keystore.type=JKS
-        	jetty.browser.keystore.type=JKS
-        	jetty.backchannel.keystore.password= SeCrEt
-        	jetty.browser.keystore.password= SeCrEt
-        	jetty.backchannel.keystore.path= ${idp.target.dir}/credentials/idp.jks
-        	jetty.browser.keystore.path= ${idp.target.dir}/credentials/idp.jks
-        </echo>
-    </target>
-
-    <target name="gen-userfacing" if="generate.userfacing.p12">
-        <selfsignedcert hostname="${idp.host.name}" keystoreFile="${idp.target.dir}/credentials/idp-userfacing.p12" keystorePassword="${idp.keystore.password}" uriSubjectAltNames="${idp.uri.subject.alt.name}" />
-    </target>
-
-    <target name="directories">
-        <mkdir dir="jetty-base/start.d" />
-        <mkdir dir="jetty-base/logs" />
-        <mkdir dir="static" />
-    </target>
-
-    <target name="copyinis" depends="directories, copyidpini">
-        <copy file="jetty-base/start.d.dist/jsp.ini" tofile="jetty-base/start.d/jsp.ini" overwrite="false" failonerror="false" />
-        <copy file="jetty-base/start.d.dist/jstl.ini" tofile="jetty-base/start.d/jstl.ini" overwrite="false" failonerror="false" />
-    </target>
-
-    <target name="copyidpini" depends="directories" unless="idp.ini.present">
-        <mergeproperties inFile="${idp.target.dir}/jetty-base/start.d.dist/idp.ini" outFile="${idp.target.dir}/jetty-base/start.d/idp.ini" mergeFile="${jetty.merge.properties}" />
-    </target>
-
-   <target name="reprotect">
-       <chmod perm="600" dir="jetty-base/start.d" includes="**/*.key"/>
-       <chmod perm="444" dir="jetty-base/etc" includes="**/*"/>
-       <chmod perm="444" dir="jetty-base/lib" includes="**/*"/>
-       <chmod perm="444" dir="jetty-base/webapps" includes="**/*"/>
-       <attrib readonly="true">
-           <fileset dir="jetty-base/etc" includes="**/*"/>
-       </attrib>
-    	<attrib readonly="true">
-        	<fileset dir="jetty-base/lib" includes="**/*"/>
-    	</attrib>
-    	<attrib readonly="true">
-        	<fileset dir="jetty-base/webapps" includes="**/*"/>
-    	</attrib>
-    </target>
-
-    <target name="tidy" unless="jetty.no.tidy">
-        <delete file="${jetty.merge.properties}" failonerror="false" />
-        <delete file="${jetty.property.file}" failonerror="false" />
-    </target>
-
-</project>
+<?xml version="1.0" encoding="UTF-8"?>
+<project name="Shibboleth IdP V3 - Jetty Container" basedir=".." default="install">
+
+    <!--  This file is for automatic configuration of Jetty, primarily from the MSI installer.
+
+       	Names and APIS *may* change in the future, please enter an RFI if you wish to use this
+       	in production outside the MSI installer.
+
+        TARGETS:
+
+        	The only top level target is "install".  This in turn calls subsidiary targets.
+
+        PROPERTIES:
+
+            The following properties are used.  They have to be provided on the command line or
+            via the property file.
+
+            jetty.property.file: Name of a file to fill in all or some of the below. This file is deleted after processing.
+            jetty.merge.properties: The name of a property file to merge with idp.ini.  This file is deleted after processing.
+            idp.host.name: The host name.
+            idp.uri.subject.alt.name: If we are creating certificates.
+            idp.target.dir: where to install to.
+
+            idp.keystore.password: password to use on the PKCS12 file for a user-facing TLS credential,
+                which will be created if one does not already exist either in JKS or PKCS12 form.
+                This value must also have been written to the merge properties file as
+                jetty.browser.keystore.password.
+
+            jetty.no.tidy: Do not delete the two above files (debug only)
+
+    -->
+
+    <taskdef resource="net/shibboleth/idp/installer/ant.xml" />
+
+    <target name="install" depends="init, properties, keystores, directories, copyinis, reprotect, tidy" />
+
+    <target name="init">
+        <tstamp />
+        <hostinfo />
+    </target>
+
+    <target name="properties">
+        <property file="${jetty.property.file}" />
+        <available property="idp.ini.present" file="${idp.target.dir}/jetty-base/start.d/idp.ini" />
+        <available property="idp.jks.present" file="${idp.target.dir}/credentials/idp.jks" />
+        <available property="idp.userfacing.p12.present" file="${idp.target.dir}/credentials/idp-userfacing.p12" />
+        <condition property="generate.userfacing.p12">
+            <!-- Generate the pkcs12 keystore if neither the JKS nor the P12 exist -->
+            <not>
+                <or>
+                    <istrue value="${idp.jks.present}" />
+                    <istrue value="${idp.userfacing.p12.present}" />
+                </or>
+            </not>
+        </condition>
+    </target>
+
+    <!-- Handle keystores -->
+    <target name="keystores" depends="jks, gen-userfacing" />
+
+    <target name="jks" if="idp.jks.present">
+      	<!-- Note that this password is the old default for QI.  This will overwrite what we may have put in when the merge file was created. -->
+      	<echo file="${jetty.merge.properties}" append="yes">
+        	jetty.backchannel.keystore.type=JKS
+        	jetty.browser.keystore.type=JKS
+        	jetty.backchannel.keystore.password= SeCrEt
+        	jetty.browser.keystore.password= SeCrEt
+        	jetty.backchannel.keystore.path= ${idp.target.dir}/credentials/idp.jks
+        	jetty.browser.keystore.path= ${idp.target.dir}/credentials/idp.jks
+        </echo>
+    </target>
+
+    <target name="gen-userfacing" if="generate.userfacing.p12">
+        <selfsignedcert hostname="${idp.host.name}" keystoreFile="${idp.target.dir}/credentials/idp-userfacing.p12" keystorePassword="${idp.keystore.password}" uriSubjectAltNames="${idp.uri.subject.alt.name}" />
+    </target>
+
+    <target name="directories">
+        <mkdir dir="jetty-base/start.d" />
+        <mkdir dir="jetty-base/logs" />
+        <mkdir dir="static" />
+    </target>
+
+    <target name="copyinis" depends="directories, copyidpini">
+        <copy file="jetty-base/start.d.dist/jsp.ini" tofile="jetty-base/start.d/jsp.ini" overwrite="false" failonerror="false" />
+        <copy file="jetty-base/start.d.dist/jstl.ini" tofile="jetty-base/start.d/jstl.ini" overwrite="false" failonerror="false" />
+    </target>
+
+    <target name="copyidpini" depends="directories" unless="idp.ini.present">
+        <mergeproperties inFile="${idp.target.dir}/jetty-base/start.d.dist/idp.ini" outFile="${idp.target.dir}/jetty-base/start.d/idp.ini" mergeFile="${jetty.merge.properties}" />
+    </target>
+
+   <target name="reprotect">
+       <chmod perm="600" dir="jetty-base/start.d" includes="**/*.key"/>
+       <chmod perm="444" dir="jetty-base/etc" includes="**/*"/>
+       <chmod perm="444" dir="jetty-base/lib" includes="**/*"/>
+       <chmod perm="444" dir="jetty-base/webapps" includes="**/*"/>
+       <attrib readonly="true">
+           <fileset dir="jetty-base/etc" includes="**/*"/>
+       </attrib>
+    	<attrib readonly="true">
+        	<fileset dir="jetty-base/lib" includes="**/*"/>
+    	</attrib>
+    	<attrib readonly="true">
+        	<fileset dir="jetty-base/webapps" includes="**/*"/>
+    	</attrib>
+    </target>
+
+    <target name="tidy" unless="jetty.no.tidy">
+        <delete file="${jetty.merge.properties}" failonerror="false" />
+        <delete file="${jetty.property.file}" failonerror="false" />
+    </target>
+
+</project>
diff -rupN shibboleth-idp/bin/build.bat shibboleth-idp/bin/build.bat
--- shibboleth-idp/bin/build.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/build.bat	2019-07-01 13:03:37.377963985 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
-"%~dp0\ant.bat" %* build-war
+@echo off
+setlocal
+
+"%~dp0\ant.bat" %* build-war
diff -rupN shibboleth-idp/bin/build.xml shibboleth-idp/bin/build.xml
--- shibboleth-idp/bin/build.xml	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/build.xml	2019-07-01 13:03:37.381963824 -0400
@@ -1,703 +1,703 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="Shibboleth Identity Provider V3" basedir=".." default="install"
-    xmlns:if="ant:if"
-    xmlns:unless="ant:unless">  
-
-    <taskdef resource="net/shibboleth/idp/installer/ant.xml" />
-
-    <!--  TARGETS:
-
-        The following top level targets are implemented and supported.  These in turn call subsidiary targets,
-        whose use outside this file is not supported.
-
-        install-nocopy:  Does the installation/upgrade on a layout that has been copied (ie, the important
-                         stuff has been copied or overwritten from the distribution)
-                         A V2 upgrade will be performed if a V2 site is detected.
-        build-war:       Create the war file
-        install:         Copies files from the distribution to the specified target and then
-                         invokes install-nocopy
-
-        PROPERTIES:
-        The following properties are used.  If they are not specified on the command line then
-        they will be prompted for if needed.
-
-        idp.src.dir (update only):  Where to install from.  No default
-        idp.target.dir (all): where to install to.  Default is basedir.
-        idp.host.name: If we are creating certificates
-        idp.uri.subject.alt.name: If we are creating certificates.  Defaulted
-        idp.sealer.password:
-        idp.sealer.alias:
-        idp.keystore.password:
-        idp.scope: The scope to assert.  If present this should also be present in idp.merge.properties
-        idp.merge.properties: The name of a property file to merge with idp.properties.  This file only
-          used when doing the initial create of idp.properties, and is deleted after processing
-            - if idp.noprompt is set, then this file should contain a line setting idp.entityID.
-            - if idp.sealer.password is set, then this file should contain a line setting idp.sealer.storePassword and idp.sealer.keyPassword
-            - if idp.scope is present, then this file should contain a line setting idp.scope
-        services.merge.properties: The name of a property file to merge with services.properties
-            - if idp.is.V2 is set, then this file should contain a line setting
-                idp.service.relyingparty.resources=shibboleth.LegacyRelyingPartyResolverResources
-        nameid.merge.properties: The name of a property file to merge with saml-nameid.properties
-            - if idp.is.V2 is set, then this file should contain lines enabling legacy nameid generation
-        idp.property.file: The name of a property file to fill in some or all of the above. This file is deleted after processing.
-        idp.no.tidy: Do not delete the two above files (debug only)
-        idp.jetty.config: Copy jetty configuration from distribution (Unsupported)
-        ldap.merge.properties:  The name of a property file to merge with ldap.properties
-        idp.conf.filemode (default "600"): The permissions to mark the files in conf with (UNIX only).
-
-        The property idp.noprompt will cause a failure rather than a prompt.
-    -->
-
-    <macrodef name="TGT" description="log the invocation of an Ant target">
-        <text name="t" description="name of the target being invoked"/>
-        <sequential>
-            <echo append="true" file="idp_ant.log">target: @{t}${line.separator}</echo>
-        </sequential>
-    </macrodef>
-
-    <target name="init">
-        <tstamp />
-        <hostinfo />
-        <TGT>init</TGT>
-    </target>
-
-    <target name="install" depends="init, preload, getsource, gettarget, v2v3prepopulate, allinput, copy-distribution, copy-jetty-distribution, install-nocopy, tidy" />
-    <target name="install-nocopy" depends="init, preload, gettarget, v2v3prepopulate, allinput, genkeys, upgrade, metadata-gen, reprotect, build-war, tidy" />
-
-    <!-- USER INPUT -->
-    <target name="preload" if="idp.property.file">
-        <TGT>preload</TGT>
-        <property file="${idp.property.file}"/>
-    </target>
-    <target name="allinput" depends="gettarget, checkproperties, gethostname, getentityid, geturisubjectaltname, setscope, askscope, writescope, getkeystorepassword, getsealerpassword, getsealeralias" />
-
-    <target name="gethostname" if="idp.ask.hostname" depends="checkproperties">
-        <TGT>gethostname</TGT>
-        <fail if="idp.noprompt">Input needed, silence demanded</fail>
-        <input message="Hostname:" addproperty="idp.host.name" defaultvalue="${NAME}.${DOMAIN}" />
-    </target>
-
-    <target name="geturisubjectaltname" if="idp.generate.altname" depends="checkproperties, gethostname">
-        <TGT>geturisubjectname</TGT>
-        <property name="idp.uri.subject.alt.name" value="https://${idp.host.name}/idp/shibboleth" />
-    </target>
-
-    <target name="getkeystorepassword" if="idp.ask.keystore.password" depends="checkproperties">
-        <TGT>getkeystorepassword</TGT>
-        <fail if="idp.noprompt">Input needed, silence demanded</fail>
-        <input message="Backchannel PKCS12 Password: " addproperty="idp.keystore.password">
-            <handler classname="net.shibboleth.idp.installer.ant.PasswordHandler"/>
-        </input>
-    </target>
-
-    <target name="getsealerpassword" if="idp.ask.sealer.password" depends="checkproperties">
-        <TGT>getsealerpassword</TGT>
-        <fail if="idp.noprompt">Input needed, silence demanded</fail>
-        <input message="Cookie Encryption Key Password: " addproperty="idp.sealer.password">
-            <handler classname="net.shibboleth.idp.installer.ant.PasswordHandler"/>
-        </input>
-        <echo file="${idp.merge.properties}" append="yes">
-            idp.sealer.storePassword=${idp.sealer.password}
-        </echo>
-        <echo file="${idp.merge.properties}" append="yes">
-            idp.sealer.keyPassword=${idp.sealer.password}
-        </echo>
-    </target>
-
-    <target name="getsealeralias" if="idp.ask.sealer.alias" depends="checkproperties">
-        <TGT>getsealeralias</TGT>
-        <!--
-        <fail if="idp.noprompt">Input needed, silence demanded</fail>
-        <input message="Sealer Alias" addproperty="idp.sealer.alias" defaultvalue="secret"/>
-        -->
-        <property name="idp.sealer.alias" value="secret"/>
-    </target>
-
-    <target name="getsource" unless="idp.src.dir">
-        <TGT>getsource</TGT>
-        <fail if="idp.noprompt">Input needed, silence demanded</fail>
-        <input message="Source (Distribution) Directory (press &lt;enter&gt; to accept default):" addproperty="idp.src.dir" defaultvalue="${basedir}" />
-    </target>
-
-    <target name="gettarget" depends="target-properties, setmerge, setservicemerge, target-src-default, target-nosrc-default, prompttarget, settarget, setfilemode" />
-
-    <target name="setmerge" unless="idp.merge.properties.present">
-        <property name="idp.merge.properties" value="replace.properties" />
-    </target>
-
-    <target name="setservicemerge" unless="services.merge.properties.present">
-        <property name="services.merge.properties" value="replace.services.properties" />
-    </target>
-
-    <target name="setfilemode" unless="idp.conf.filemode.present">
-        <property name="idp.conf.filemode" value="600" />
-    </target>
-
-    <target name="setnameidmerge" unless="nameid.merge.properties.present">
-        <property name="nameid.merge.properties" value="replace.nameid.properties" />
-    </target>
-
-    <target name="target-src-default" unless="idp.src.dir.present">
-        <TGT>target-src-default</TGT>
-        <!-- if the source isn't set up then the default is basedir -->
-        <property name="idp.target.default" value="${basedir}" />
-    </target>
-
-    <target name="target-nosrc-default" if="idp.src.dir.present">
-        <TGT>target-nosrc-default</TGT>
-        <!-- if the source is set up then the default must not be basedir -->
-        <property name="idp.target.default" value="/opt/shibboleth-idp" />
-    </target>
-
-    <target name="prompttarget" if="idp.ask.target">
-        <TGT>prompttarget</TGT>
-        <fail if="idp.noprompt">Input needed, silence demanded</fail>
-        <input message="Installation Directory:" addproperty="idp.target.dir" defaultvalue="${idp.target.default}" />
-    </target>
-
-    <target name="settarget" if="idp.set.target">
-        <TGT>settarget</TGT>
-        <property name="idp.target.dir" value="${basedir}" />
-    </target>
-
-    <target name="getentityid" if="idp.ask.entityid" depends="checkproperties">
-        <TGT>getentityid</TGT>
-        <fail if="idp.noprompt">Input needed, silence demanded</fail>
-        <local name="entityid" />
-        <input message="SAML EntityID:" addproperty="entityid" defaultvalue="https://${idp.host.name}/idp/shibboleth" />
-        <property name="idp.uri.subject.alt.name" value="${entityid}" />
-        <echo file="${idp.merge.properties}" append="yes">
-            idp.entityID=${entityid}
-        </echo>
-    </target>
-
-    <target name="setscope" if="idp.set.scope" depends="checkproperties">
-        <TGT>setscope</TGT>
-        <property name="idp.scope" value="${DOMAIN}"/>
-    </target>
-
-    <target name="askscope" if="idp.ask.scope" depends="checkproperties">
-        <TGT>askscope</TGT>
-        <input message="Attribute Scope:" addproperty="idp.scope" defaultvalue="${DOMAIN}" />
-    </target>
-
-    <target name="writescope" if="idp.write.scope" depends="setscope, askscope">
-        <TGT>writescope</TGT>
-        <echo file="${idp.merge.properties}" append="yes">
-           idp.scope=${idp.scope}
-        </echo>
-    </target>
-    
-    <!--
-     KEY MANAGEMENT
-    -->
-
-    <target name="genkeys" depends="init, preload, checkproperties, signing-key, encryption-key, backchannel-key, sealer" />
-
-    <target name="checkproperties" depends="gettarget, v2detect, target-properties">
-        <TGT>checkproperties</TGT>
-        <condition property="idp.metadata.present">
-            <or>
-                <istrue value="${idp.is.V2}" />
-                <available file="${idp.target.dir}/metadata/idp-metadata.xml" />
-            </or>
-        </condition>
-        <available property="idp.sealer.present" file="${idp.target.dir}/credentials/sealer.kver" />
-        <available property="idp.properties.present" file="${idp.target.dir}/conf/idp.properties" />
-        <available property="nameid.properties.present" file="${idp.target.dir}/conf/saml-nameid.properties" />
-        <available property="ldap.properties.present" file="${idp.target.dir}/conf/ldap.properties" />
-        <available property="services.properties.present" file="${idp.target.dir}/conf/services.properties" />
-        <condition property="idp.will.call.certgen">
-          <!-- We will call CertGen if there is no relying party.  Otherwise the certificates are deemed to be there -->
-          <not>
-            <istrue value="${idp.relying.party.present}" />
-          </not>
-        </condition>
-
-        <condition property="idp.ask.entityid">
-            <!-- Ask for EntityID if this is not an upgrade and the property file wasn't provided -->
-            <and>
-                <not>
-                    <istrue value="${idp.merge.properties.present}" />
-                </not>
-                <not>
-                    <istrue value="${idp.properties.present}" />
-                </not>
-            </and>
-        </condition>
-
-        <condition property="idp.ask.hostname">
-            <!-- We ask for host name if there is no host name and we will call certgen or ask for entityID -->
-            <and>
-                <not>
-                    <isset property="idp.host.name" />
-                </not>
-                <or>
-                    <istrue value="${idp.will.call.certgen}" />
-                    <istrue value="${idp.ask.entityid}" />
-                </or>
-            </and>
-        </condition>
-
-        <condition property="idp.ask.scope">
-            <!-- We ask for scope if there is no scope and we allow user input and there is no idp properties file -->
-            <and>
-                <not>
-                    <isset property="idp.scope" />
-                </not>
-                <not>
-                    <isset property="idp.noprompt" />
-                </not>
-                <isfalse value="${idp.properties.present}" />
-            </and>
-        </condition>
-
-        <condition property="idp.set.scope">
-            <!-- We set scope if there is no scope and we do not allow user input and there is no idp properties file -->
-            <and>
-                <not>
-                    <isset property="idp.scope" />
-                </not>
-                <isset property="idp.noprompt" />
-                <isfalse value="${idp.properties.present}" />
-            </and>
-        </condition>
-
-        <condition property="idp.write.scope">
-            <!-- We write the scope if we set it, ask for it, or if its supplied -->
-            <or>
-                <isset property="idp.scope" />
-                <isset property="idp.ask.scope" />
-                <isset property="idp.write.scope" />
-            </or>
-        </condition>
-
-        <condition property="idp.generate.altname">
-            <!-- We ask for alt name if there is no alt name and we will call certgen -->
-            <and>
-                <not>
-                    <isset property="idp.uri.subject.alt.name" />
-                </not>
-                <istrue value="${idp.will.call.certgen}" />
-            </and>
-        </condition>
-
-        <condition property="idp.ask.keystore.password">
-            <!-- We ask for keystore password if there is no keystore password and
-                 the relying party (and hence keys) are not there -->
-            <and>
-                <not>
-                    <isset property="idp.keystore.password" />
-                </not>
-                <not>
-                    <istrue value="${idp.relying.party.present}" />
-                </not>
-            </and>
-        </condition>
-
-        <condition property="idp.ask.sealer.password">
-            <!-- We ask for sealer password if there is no sealer password and no sealer -->
-            <and>
-                <not>
-                    <isset property="idp.sealer.password" />
-                </not>
-                <not>
-                    <istrue value="${idp.sealer.present}" />
-                </not>
-            </and>
-        </condition>
-
-        <condition property="idp.ask.sealer.alias">
-            <!-- We ask for sealer alias if there is no sealer alias and no sealer -->
-            <and>
-                <not>
-                    <isset property="idp.sealer.alias" />
-                </not>
-                <not>
-                    <istrue value="${idp.sealer.present}" />
-                </not>
-            </and>
-        </condition>
-
-        <condition property="idp.merge.ldap.properties">
-            <!-- We merge ldap.properties if ldap.merge.properties is set  AND ldap.properties does NOT exist-->
-            <and>
-                <isset property="ldap.merge.properties" />
-                <not>
-                    <istrue value="${ldap.properties.present}" />
-                </not>
-            </and>
-        </condition>
-    </target>
-
-    <target name="target-properties">
-        <TGT>target-properties</TGT>
-        <condition property="idp.ask.target">
-            <and>
-                <not>
-                    <isset property="idp.target.dir" />
-                </not>
-                <not>
-                    <isset property="idp.noprompt" />
-                </not>
-            </and>
-        </condition>
-
-        <condition property="idp.set.target">
-            <and>
-                <not>
-                    <isset property="idp.target.dir" />
-                </not>
-                <isset property="idp.noprompt" />
-            </and>
-        </condition>
-
-        <condition property="idp.src.dir.present">
-            <isset property="idp.src.dir" />
-        </condition>
-
-        <condition property="idp.merge.properties.present">
-            <isset property="idp.merge.properties" />
-        </condition>
-
-        <condition property="nameid.merge.properties.present">
-            <isset property="nameid.merge.properties" />
-        </condition>
-
-        <condition property="services.merge.properties.present">
-            <isset property="services.merge.properties" />
-        </condition>
-
-        <condition property="idp.conf.filemode.present">
-            <isset property="idp.conf.filemode"/>
-        </condition>
-    </target>
-
-    <target name="signing-key" unless="idp.relying.party.present" depends="gethostname, geturisubjectaltname">
-        <TGT>signing-key</TGT>
-        <echo>Generating Signing Key, CN = ${idp.host.name} URI = ${idp.uri.subject.alt.name} ...</echo>
-        <mkdir dir="${idp.target.dir}/credentials"/>
-        <selfsignedcert hostname="${idp.host.name}" privateKeyFile="${idp.target.dir}/credentials/idp-signing.key" certificateFile="${idp.target.dir}/credentials/idp-signing.crt" uriSubjectAltNames="${idp.uri.subject.alt.name}" />
-        <echo>...done</echo>
-    </target>
-
-    <target name="encryption-key" unless="idp.relying.party.present" depends="gethostname, geturisubjectaltname">
-        <TGT>encryption-key</TGT>
-        <echo>Creating Encryption Key, CN = ${idp.host.name} URI = ${idp.uri.subject.alt.name} ...</echo>
-        <mkdir dir="${idp.target.dir}/credentials"/>
-        <selfsignedcert hostname="${idp.host.name}" privateKeyFile="${idp.target.dir}/credentials/idp-encryption.key" certificateFile="${idp.target.dir}/credentials/idp-encryption.crt" uriSubjectAltNames="${idp.uri.subject.alt.name}" />
-        <echo>...done</echo>
-    </target>
-
-    <target name="backchannel-key" unless="idp.relying.party.present" depends="getkeystorepassword, gethostname, geturisubjectaltname">
-        <TGT>backchannel-key</TGT>
-        <echo>Creating Backchannel keystore, CN = ${idp.host.name} URI = ${idp.uri.subject.alt.name} ...</echo>
-        <mkdir dir="${idp.target.dir}/credentials"/>
-        <selfsignedcert hostname="${idp.host.name}" keystoreFile="${idp.target.dir}/credentials/idp-backchannel.p12" certificateFile="${idp.target.dir}/credentials/idp-backchannel.crt" keystorePassword="${idp.keystore.password}" uriSubjectAltNames="${idp.uri.subject.alt.name}" />
-        <echo>...done</echo>
-    </target>
-
-    <target name="sealer" unless="idp.sealer.present" depends="getsealerpassword, getsealeralias">
-        <TGT>sealer</TGT>
-        <echo>Creating cookie encryption key files...</echo>
-        <mkdir dir="${idp.target.dir}/credentials"/>
-        <keystorestrategy keystoreFile="${idp.target.dir}/credentials/sealer.jks" versionFile="${idp.target.dir}/credentials/sealer.kver" keyAlias="${idp.sealer.alias}" keystorePassword="${idp.sealer.password}" />
-        <echo>...done</echo>
-    </target>
-
-    <!--
-     GENERAL V3 TO V3 UPGRADE
-    -->
-
-    <target name="upgrade" depends="editproperties, editservicesproperties, editnameidproperties, editldapproperties, handleeditwebapp">
-        <TGT>upgrade</TGT>
-
-        <!-- conf: copy from dist if not already present -->
-        <mkdir dir="${idp.target.dir}/conf" />
-        <copy todir="${idp.target.dir}/conf">
-            <fileset dir="${idp.target.dir}/dist/conf" includes="**/*">
-                <present present="srconly" targetdir="${idp.target.dir}/conf">
-                    <mapper type="glob" from="*.dist" to="*" />
-                </present>
-            </fileset>
-            <mapper type="glob" from="*.dist" to="*" />
-        </copy>
-
-        <!-- flows: copy from dist if not already present -->
-        <mkdir dir="${idp.target.dir}/flows" />
-        <copy todir="${idp.target.dir}/flows">
-            <fileset dir="${idp.target.dir}/dist/flows" includes="**/*">
-                <present present="srconly" targetdir="${idp.target.dir}/flows">
-                    <mapper type="glob" from="*.dist" to="*" />
-                </present>
-            </fileset>
-            <mapper type="glob" from="*.dist" to="*" />
-        </copy>
-
-        <!-- messages: copy from dist if not already present -->
-        <mkdir dir="${idp.target.dir}/messages" />
-        <copy todir="${idp.target.dir}/messages">
-            <fileset dir="${idp.target.dir}/dist/messages" includes="**/*">
-                <present present="srconly" targetdir="${idp.target.dir}/messages">
-                    <mapper type="glob" from="*.dist" to="*" />
-                </present>
-            </fileset>
-            <mapper type="glob" from="*.dist" to="*" />
-        </copy>
-
-        <!-- views: copy from dist if not already present -->
-        <mkdir dir="${idp.target.dir}/views" />
-        <copy todir="${idp.target.dir}/views">
-            <fileset dir="${idp.target.dir}/dist/views" includes="**/*">
-                <present present="srconly" targetdir="${idp.target.dir}/views">
-                    <mapper type="glob" from="*.dist" to="*" />
-                </present>
-            </fileset>
-            <mapper type="glob" from="*.dist" to="*" />
-        </copy>
-
-        <!-- Other dirs -->
-        <mkdir dir="${idp.target.dir}/logs" />
-    </target>
-
-    <target name="editproperties" depends="gettarget, getentityid" unless="idp.properties.present">
-        <TGT>editproperties</TGT>
-        <mkdir dir="${idp.target.dir}/conf" />
-        <mergeproperties inFile="${idp.target.dir}/dist/conf/idp.properties.dist" outFile="${idp.target.dir}/conf/idp.properties" mergeFile="${idp.merge.properties}" />
-    </target>
-
-    <target name="editservicesproperties" depends="gettarget" if="idp.is.V2" unless="services.properties.present">
-        <TGT>editservicesproperties</TGT>
-        <mkdir dir="${idp.target.dir}/conf" />
-        <mergeproperties inFile="${idp.target.dir}/dist/conf/services.properties.dist" outFile="${idp.target.dir}/conf/services.properties" mergeFile="${services.merge.properties}" />
-    </target>
-
-    <target name="editnameidproperties" depends="gettarget" if="idp.is.V2" unless="nameid.properties.present">
-        <TGT>editnameidproperties</TGT>
-        <mkdir dir="${idp.target.dir}/conf" />
-        <mergeproperties inFile="${idp.target.dir}/dist/conf/saml-nameid.properties.dist" outFile="${idp.target.dir}/conf/saml-nameid.properties" mergeFile="${nameid.merge.properties}" />
-    </target>
-
-    <target name="editldapproperties" depends="gettarget" if="idp.merge.ldap.properties" unless="ldap.properties.present">
-        <TGT>editldapproperties</TGT>
-        <mkdir dir="${idp.target.dir}/conf" />
-        <mergeproperties inFile="${idp.target.dir}/dist/conf/ldap.properties.dist" outFile="${idp.target.dir}/conf/ldap.properties" mergeFile="${ldap.merge.properties}" />
-    </target>
-
-    <target name="metadata-gen" depends="gettarget, getentityid, gethostname, genkeys, upgrade"  unless="idp.metadata.present">
-        <TGT>metadata-gen</TGT>
-        <mkdir dir="${idp.target.dir}/metadata"/>
-        <metadatagenerate dnsName="${idp.host.name}" idpHome="${idp.target.dir}" backChannelCert="${idp.target.dir}/credentials/idp-backchannel.crt" output="${idp.target.dir}/metadata/idp-metadata.xml"/>
-    </target>
-
-    <target name="handleeditwebapp" depends="makeeditwebapp, populateeditwebapp"/>
-
-    <target name="makeeditwebapp">
-        <TGT>makeeditwebapp</TGT>
-        <!-- Create edit-webapp tree -->
-        <mkdir dir="${idp.target.dir}/edit-webapp" />
-        <mkdir dir="${idp.target.dir}/edit-webapp/css" />
-        <mkdir dir="${idp.target.dir}/edit-webapp/images" />
-        <mkdir dir="${idp.target.dir}/edit-webapp/WEB-INF" />
-        <mkdir dir="${idp.target.dir}/edit-webapp/WEB-INF/lib" />
-        <mkdir dir="${idp.target.dir}/edit-webapp/WEB-INF/classes" />
-    </target>
-
-    <target name="populateeditwebapp" unless="idp.properties.present">
-        <TGT>populateeditwebapp</TGT>
-        <copy todir="${idp.target.dir}/edit-webapp/css" failonerror="false">
-            <fileset dir="${idp.target.dir}/webapp/css" />
-        </copy>
-        <copy todir="${idp.target.dir}/edit-webapp/images" failonerror="false">
-            <fileset dir="${idp.target.dir}/webapp/images" />
-        </copy>
-    </target>
-
-    <!--
-     CREATE WAR FILE
-    -->
-    <target name="build-war" depends="gettarget">
-        <!-- no logging -->
-        <echo>Rebuilding ${idp.target.dir}/war/idp.war ...</echo>
-        <copy todir="${idp.target.dir}/webapp" overwrite="true" failonerror="false">
-            <fileset dir="${idp.target.dir}/edit-webapp" />
-        </copy>
-        <!-- build a jar, not war, since it is already fully populated -->
-        <delete file="${idp.target.dir}/war/idp.war" failonerror="false" />
-        <jar destfile="${idp.target.dir}/war/idp.war" basedir="${idp.target.dir}/webapp" />
-        <echo>...done</echo>
-    </target>
-
-    <!-- specify getsource before get target to force target default-->
-    <target name="copy-distribution" depends="init, getsource, gettarget">
-        <TGT>copy-distribution</TGT>
-        <local name="target" />
-        <property name="target" value="${idp.target.dir}/old-${DSTAMP}-${TSTAMP}" />
-
-        <!-- Save old configuration:
-         NOT conf, credentials, flows, logs, messages, metadata, views-->
-        <mkdir dir="${target}" />
-
-        <!-- NOTE - move task appears to be very flaky - at least on windows.  This is why we
-         copy with a force overwrite and then explicitly delete -->
-        <copy todir="${target}/bin" failonerror="false">
-            <fileset dir="${idp.target.dir}/bin" />
-        </copy>
-        <copy todir="${target}/dist" failonerror="false">
-            <fileset dir="${idp.target.dir}/dist" />
-        </copy>
-        <copy todir="${target}/doc" failonerror="false">
-            <fileset dir="${idp.target.dir}/doc" />
-        </copy>
-        <copy todir="${target}/system" failonerror="false">
-            <fileset dir="${idp.target.dir}/system" />
-        </copy>
-        <copy todir="${target}/webapp" failonerror="false">
-            <fileset dir="${idp.target.dir}/webapp" />
-        </copy>
-
-        <!-- Do not delete bin, this preserves user scripts.
-        Delete bin/lib so as to clear up old jar files. -->
-        <delete dir="${idp.target.dir}/bin/lib" failonerror="false" />
-        <delete dir="${idp.target.dir}/dist" failonerror="false" />
-        <delete dir="${idp.target.dir}/doc" failonerror="false" />
-        <mkdir dir="${idp.target.dir}/system"/> <!-- create because it won't exist first time -->
-        <attrib readonly="false">
-            <fileset dir="${idp.target.dir}/system" includes="**/*"/>
-        </attrib>
-        <delete dir="${idp.target.dir}/system" failonerror="false" />
-        <delete dir="${idp.target.dir}/webapp" failonerror="false" />
-
-        <!-- Now copy or create empty as required.
-        Creating an existing file is benign, bin gets updated -->
-
-        <copy todir="${idp.target.dir}/bin" overwrite="true">
-            <fileset dir="${idp.src.dir}/bin"  excludes="**/ant-jetty.xml **/install.*"/>
-        </copy>
-        <mkdir dir="${idp.target.dir}/conf" />
-        <mkdir dir="${idp.target.dir}/credentials" />
-        <copy todir="${idp.target.dir}/dist">
-            <fileset dir="${idp.src.dir}/dist" />
-        </copy>
-        <mkdir dir="${idp.target.dir}/doc" />
-        <copy todir="${idp.target.dir}/doc">
-            <fileset dir="${idp.src.dir}/doc" />
-        </copy>
-
-        <mkdir dir="${idp.target.dir}/flows" />
-        <mkdir dir="${idp.target.dir}/logs" />
-        <mkdir dir="${idp.target.dir}/messages" />
-        <mkdir dir="${idp.target.dir}/metadata" />
-        <copy todir="${idp.target.dir}/system">
-            <fileset dir="${idp.src.dir}/system" />
-        </copy>
-        <mkdir dir="${idp.target.dir}/views" />
-        <mkdir dir="${idp.target.dir}/war" />
-        <mkdir dir="${idp.target.dir}/webapp" />
-        <copy todir="${idp.target.dir}/webapp">
-            <fileset dir="${idp.src.dir}/webapp" />
-        </copy>
-    </target>
-
-    <target name="copy-jetty-distribution" depends="copy-distribution" if="idp.jetty.config">
-        <TGT>copy-jetty-distribution</TGT>
-
-        <!-- save old -->
-        <local name="target" />
-        <property name="target" value="${idp.target.dir}/old-${DSTAMP}-${TSTAMP}" />
-
-        <!--- IDP-626 we do not need to preserve tmp -->
-        <delete failonerror="false"  dir="${idp.target.dir}/jetty-base/tmp"/>
-        <copy todir="${target}/jetty-base" failonerror="false">
-            <fileset dir="${idp.target.dir}/jetty-base" />
-        </copy>
-        <delete failonerror="false" dir="${idp.target.dir}/jetty-base"/>
-
-        <!-- Copy new -->
-        <copy todir="${idp.target.dir}/jetty-base">
-            <fileset dir="${idp.src.dir}/embedded/jetty-base" />
-        </copy>
-        <!-- rename Start.d -->
-        <move file="${idp.target.dir}/jetty-base/start.d" tofile="${idp.target.dir}/jetty-base/start.d.dist"/>
-        <!-- And restore the old one if present -->
-        <copy todir="${idp.target.dir}/jetty-base/start.d" failonerror="false">
-            <fileset dir="${target}/jetty-base/start.d" />
-        </copy>
-        <!-- finally copy the ant file -->
-        <copy file="${idp.src.dir}/bin/ant-jetty.xml" tofile="${idp.target.dir}/bin/ant-jetty.xml" overwrite="true"/>
-    </target>
-
-    <!-- V2 to V3 PrePopulate -->
-
-    <target name="v2v3prepopulate" depends="gettarget, v2detect" if="idp.is.V2">
-        <TGT>v2v3prepopulate</TGT>
-        <echo>
-A V2 Installation has been detected. Configuration will be preserved into
-.v2 folders and appropriate files copied forward.
-        </echo>
-        <!-- rename war to war.v2 -->
-        <copy todir="${idp.target.dir}/war.v2" failonerror="true">
-            <fileset dir="${idp.target.dir}/war" />
-        </copy>
-        <delete dir="${idp.target.dir}/war" failonerror="false" />
-
-        <!-- rename conf to conf.v2 -->
-        <copy todir="${idp.target.dir}/conf.v2" failonerror="true">
-            <fileset dir="${idp.target.dir}/conf" />
-        </copy>
-        <delete dir="${idp.target.dir}/conf" failonerror="false" />
-
-        <!-- delete old lib folder, just avoids confusion -->
-        <delete dir="${idp.target.dir}/lib" failonerror="false" />
-
-        <!-- copy selected files from conf.v2 -->
-        <mkdir dir="${idp.target.dir}/conf" />
-        <copy file="${idp.target.dir}/conf.v2/attribute-filter.xml" tofile="${idp.target.dir}/conf/attribute-filter.xml" failonerror="false" />
-        <copy file="${idp.target.dir}/conf.v2/attribute-resolver.xml" tofile="${idp.target.dir}/conf/attribute-resolver.xml" failonerror="false" />
-        <copy file="${idp.target.dir}/conf.v2/relying-party.xml" tofile="${idp.target.dir}/conf/metadata-providers.xml" failonerror="false" />
-        <copy file="${idp.target.dir}/conf.v2/relying-party.xml" tofile="${idp.target.dir}/conf/relying-party.xml" failonerror="false" />
-
-        <!-- Signal we're a legacy RP config -->
-        <echo file="${services.merge.properties}" append="yes">
-            idp.service.relyingparty.resources = shibboleth.LegacyRelyingPartyResolverResources
-        </echo>
-        <echo file="${nameid.merge.properties}" append="yes">
-            idp.nameid.saml2.legacyGenerator = shibboleth.LegacySAML2NameIDGenerator
-            idp.nameid.saml1.legacyGenerator = shibboleth.LegacySAML1NameIdentifierGenerator
-        </echo>
-    </target>
-
-    <target name="v2detect" depends="gettarget">
-        <TGT>v2detect</TGT>
-        <available property="idp.properties.present" file="${idp.target.dir}/conf/idp.properties" />
-        <available property="idp.relying.party.present" file="${idp.target.dir}/conf/relying-party.xml" />
-        <condition property="idp.is.V2">
-            <!-- This is V2 as there is relying-party.xml and not idp.properties -->
-            <and>
-                <isfalse value="${idp.properties.present}" />
-                <istrue value="${idp.relying.party.present}" />
-            </and>
-        </condition>
-    </target>
-
-    <target name="reprotect" depends="gettarget">
-        <!-- See IDP-487 -->
-        <chmod perm="755" dir="${idp.target.dir}/bin" includes="**/*.sh"/>
-        <chmod perm="600" dir="${idp.target.dir}/credentials" includes="**/*.key"/>
-        <chmod perm="${idp.conf.filemode}" dir="${idp.target.dir}/conf" includes="**/*"/>
-        <chmod perm="444" dir="${idp.target.dir}/system" includes="**/*"/>
-        <attrib readonly="true">
-            <fileset dir="${idp.target.dir}/system" includes="**/*"/>
-        </attrib>
-    </target>
-
-    <target name="tidy" unless="idp.no.tidy">
-        <TGT>tidy</TGT>
-        <delete file="${idp.merge.properties}" failonerror="false" />
-        <delete file="${services.merge.properties}" failonerror="false" />
-        <delete file="${nameid.merge.properties}" failonerror="false" />
-        <delete file="${ldap.merge.properties}" failonerror="false" />
-        <delete file="${idp.property.file}" failonerror="false" />
-    </target>
-
-</project>
+<?xml version="1.0" encoding="UTF-8"?>
+<project name="Shibboleth Identity Provider V3" basedir=".." default="install"
+    xmlns:if="ant:if"
+    xmlns:unless="ant:unless">  
+
+    <taskdef resource="net/shibboleth/idp/installer/ant.xml" />
+
+    <!--  TARGETS:
+
+        The following top level targets are implemented and supported.  These in turn call subsidiary targets,
+        whose use outside this file is not supported.
+
+        install-nocopy:  Does the installation/upgrade on a layout that has been copied (ie, the important
+                         stuff has been copied or overwritten from the distribution)
+                         A V2 upgrade will be performed if a V2 site is detected.
+        build-war:       Create the war file
+        install:         Copies files from the distribution to the specified target and then
+                         invokes install-nocopy
+
+        PROPERTIES:
+        The following properties are used.  If they are not specified on the command line then
+        they will be prompted for if needed.
+
+        idp.src.dir (update only):  Where to install from.  No default
+        idp.target.dir (all): where to install to.  Default is basedir.
+        idp.host.name: If we are creating certificates
+        idp.uri.subject.alt.name: If we are creating certificates.  Defaulted
+        idp.sealer.password:
+        idp.sealer.alias:
+        idp.keystore.password:
+        idp.scope: The scope to assert.  If present this should also be present in idp.merge.properties
+        idp.merge.properties: The name of a property file to merge with idp.properties.  This file only
+          used when doing the initial create of idp.properties, and is deleted after processing
+            - if idp.noprompt is set, then this file should contain a line setting idp.entityID.
+            - if idp.sealer.password is set, then this file should contain a line setting idp.sealer.storePassword and idp.sealer.keyPassword
+            - if idp.scope is present, then this file should contain a line setting idp.scope
+        services.merge.properties: The name of a property file to merge with services.properties
+            - if idp.is.V2 is set, then this file should contain a line setting
+                idp.service.relyingparty.resources=shibboleth.LegacyRelyingPartyResolverResources
+        nameid.merge.properties: The name of a property file to merge with saml-nameid.properties
+            - if idp.is.V2 is set, then this file should contain lines enabling legacy nameid generation
+        idp.property.file: The name of a property file to fill in some or all of the above. This file is deleted after processing.
+        idp.no.tidy: Do not delete the two above files (debug only)
+        idp.jetty.config: Copy jetty configuration from distribution (Unsupported)
+        ldap.merge.properties:  The name of a property file to merge with ldap.properties
+        idp.conf.filemode (default "600"): The permissions to mark the files in conf with (UNIX only).
+
+        The property idp.noprompt will cause a failure rather than a prompt.
+    -->
+
+    <macrodef name="TGT" description="log the invocation of an Ant target">
+        <text name="t" description="name of the target being invoked"/>
+        <sequential>
+            <echo append="true" file="idp_ant.log">target: @{t}${line.separator}</echo>
+        </sequential>
+    </macrodef>
+
+    <target name="init">
+        <tstamp />
+        <hostinfo />
+        <TGT>init</TGT>
+    </target>
+
+    <target name="install" depends="init, preload, getsource, gettarget, v2v3prepopulate, allinput, copy-distribution, copy-jetty-distribution, install-nocopy, tidy" />
+    <target name="install-nocopy" depends="init, preload, gettarget, v2v3prepopulate, allinput, genkeys, upgrade, metadata-gen, reprotect, build-war, tidy" />
+
+    <!-- USER INPUT -->
+    <target name="preload" if="idp.property.file">
+        <TGT>preload</TGT>
+        <property file="${idp.property.file}"/>
+    </target>
+    <target name="allinput" depends="gettarget, checkproperties, gethostname, getentityid, geturisubjectaltname, setscope, askscope, writescope, getkeystorepassword, getsealerpassword, getsealeralias" />
+
+    <target name="gethostname" if="idp.ask.hostname" depends="checkproperties">
+        <TGT>gethostname</TGT>
+        <fail if="idp.noprompt">Input needed, silence demanded</fail>
+        <input message="Hostname:" addproperty="idp.host.name" defaultvalue="${NAME}.${DOMAIN}" />
+    </target>
+
+    <target name="geturisubjectaltname" if="idp.generate.altname" depends="checkproperties, gethostname">
+        <TGT>geturisubjectname</TGT>
+        <property name="idp.uri.subject.alt.name" value="https://${idp.host.name}/idp/shibboleth" />
+    </target>
+
+    <target name="getkeystorepassword" if="idp.ask.keystore.password" depends="checkproperties">
+        <TGT>getkeystorepassword</TGT>
+        <fail if="idp.noprompt">Input needed, silence demanded</fail>
+        <input message="Backchannel PKCS12 Password: " addproperty="idp.keystore.password">
+            <handler classname="net.shibboleth.idp.installer.ant.PasswordHandler"/>
+        </input>
+    </target>
+
+    <target name="getsealerpassword" if="idp.ask.sealer.password" depends="checkproperties">
+        <TGT>getsealerpassword</TGT>
+        <fail if="idp.noprompt">Input needed, silence demanded</fail>
+        <input message="Cookie Encryption Key Password: " addproperty="idp.sealer.password">
+            <handler classname="net.shibboleth.idp.installer.ant.PasswordHandler"/>
+        </input>
+        <echo file="${idp.merge.properties}" append="yes">
+            idp.sealer.storePassword=${idp.sealer.password}
+        </echo>
+        <echo file="${idp.merge.properties}" append="yes">
+            idp.sealer.keyPassword=${idp.sealer.password}
+        </echo>
+    </target>
+
+    <target name="getsealeralias" if="idp.ask.sealer.alias" depends="checkproperties">
+        <TGT>getsealeralias</TGT>
+        <!--
+        <fail if="idp.noprompt">Input needed, silence demanded</fail>
+        <input message="Sealer Alias" addproperty="idp.sealer.alias" defaultvalue="secret"/>
+        -->
+        <property name="idp.sealer.alias" value="secret"/>
+    </target>
+
+    <target name="getsource" unless="idp.src.dir">
+        <TGT>getsource</TGT>
+        <fail if="idp.noprompt">Input needed, silence demanded</fail>
+        <input message="Source (Distribution) Directory (press &lt;enter&gt; to accept default):" addproperty="idp.src.dir" defaultvalue="${basedir}" />
+    </target>
+
+    <target name="gettarget" depends="target-properties, setmerge, setservicemerge, target-src-default, target-nosrc-default, prompttarget, settarget, setfilemode" />
+
+    <target name="setmerge" unless="idp.merge.properties.present">
+        <property name="idp.merge.properties" value="replace.properties" />
+    </target>
+
+    <target name="setservicemerge" unless="services.merge.properties.present">
+        <property name="services.merge.properties" value="replace.services.properties" />
+    </target>
+
+    <target name="setfilemode" unless="idp.conf.filemode.present">
+        <property name="idp.conf.filemode" value="600" />
+    </target>
+
+    <target name="setnameidmerge" unless="nameid.merge.properties.present">
+        <property name="nameid.merge.properties" value="replace.nameid.properties" />
+    </target>
+
+    <target name="target-src-default" unless="idp.src.dir.present">
+        <TGT>target-src-default</TGT>
+        <!-- if the source isn't set up then the default is basedir -->
+        <property name="idp.target.default" value="${basedir}" />
+    </target>
+
+    <target name="target-nosrc-default" if="idp.src.dir.present">
+        <TGT>target-nosrc-default</TGT>
+        <!-- if the source is set up then the default must not be basedir -->
+        <property name="idp.target.default" value="/opt/shibboleth-idp" />
+    </target>
+
+    <target name="prompttarget" if="idp.ask.target">
+        <TGT>prompttarget</TGT>
+        <fail if="idp.noprompt">Input needed, silence demanded</fail>
+        <input message="Installation Directory:" addproperty="idp.target.dir" defaultvalue="${idp.target.default}" />
+    </target>
+
+    <target name="settarget" if="idp.set.target">
+        <TGT>settarget</TGT>
+        <property name="idp.target.dir" value="${basedir}" />
+    </target>
+
+    <target name="getentityid" if="idp.ask.entityid" depends="checkproperties">
+        <TGT>getentityid</TGT>
+        <fail if="idp.noprompt">Input needed, silence demanded</fail>
+        <local name="entityid" />
+        <input message="SAML EntityID:" addproperty="entityid" defaultvalue="https://${idp.host.name}/idp/shibboleth" />
+        <property name="idp.uri.subject.alt.name" value="${entityid}" />
+        <echo file="${idp.merge.properties}" append="yes">
+            idp.entityID=${entityid}
+        </echo>
+    </target>
+
+    <target name="setscope" if="idp.set.scope" depends="checkproperties">
+        <TGT>setscope</TGT>
+        <property name="idp.scope" value="${DOMAIN}"/>
+    </target>
+
+    <target name="askscope" if="idp.ask.scope" depends="checkproperties">
+        <TGT>askscope</TGT>
+        <input message="Attribute Scope:" addproperty="idp.scope" defaultvalue="${DOMAIN}" />
+    </target>
+
+    <target name="writescope" if="idp.write.scope" depends="setscope, askscope">
+        <TGT>writescope</TGT>
+        <echo file="${idp.merge.properties}" append="yes">
+           idp.scope=${idp.scope}
+        </echo>
+    </target>
+    
+    <!--
+     KEY MANAGEMENT
+    -->
+
+    <target name="genkeys" depends="init, preload, checkproperties, signing-key, encryption-key, backchannel-key, sealer" />
+
+    <target name="checkproperties" depends="gettarget, v2detect, target-properties">
+        <TGT>checkproperties</TGT>
+        <condition property="idp.metadata.present">
+            <or>
+                <istrue value="${idp.is.V2}" />
+                <available file="${idp.target.dir}/metadata/idp-metadata.xml" />
+            </or>
+        </condition>
+        <available property="idp.sealer.present" file="${idp.target.dir}/credentials/sealer.kver" />
+        <available property="idp.properties.present" file="${idp.target.dir}/conf/idp.properties" />
+        <available property="nameid.properties.present" file="${idp.target.dir}/conf/saml-nameid.properties" />
+        <available property="ldap.properties.present" file="${idp.target.dir}/conf/ldap.properties" />
+        <available property="services.properties.present" file="${idp.target.dir}/conf/services.properties" />
+        <condition property="idp.will.call.certgen">
+          <!-- We will call CertGen if there is no relying party.  Otherwise the certificates are deemed to be there -->
+          <not>
+            <istrue value="${idp.relying.party.present}" />
+          </not>
+        </condition>
+
+        <condition property="idp.ask.entityid">
+            <!-- Ask for EntityID if this is not an upgrade and the property file wasn't provided -->
+            <and>
+                <not>
+                    <istrue value="${idp.merge.properties.present}" />
+                </not>
+                <not>
+                    <istrue value="${idp.properties.present}" />
+                </not>
+            </and>
+        </condition>
+
+        <condition property="idp.ask.hostname">
+            <!-- We ask for host name if there is no host name and we will call certgen or ask for entityID -->
+            <and>
+                <not>
+                    <isset property="idp.host.name" />
+                </not>
+                <or>
+                    <istrue value="${idp.will.call.certgen}" />
+                    <istrue value="${idp.ask.entityid}" />
+                </or>
+            </and>
+        </condition>
+
+        <condition property="idp.ask.scope">
+            <!-- We ask for scope if there is no scope and we allow user input and there is no idp properties file -->
+            <and>
+                <not>
+                    <isset property="idp.scope" />
+                </not>
+                <not>
+                    <isset property="idp.noprompt" />
+                </not>
+                <isfalse value="${idp.properties.present}" />
+            </and>
+        </condition>
+
+        <condition property="idp.set.scope">
+            <!-- We set scope if there is no scope and we do not allow user input and there is no idp properties file -->
+            <and>
+                <not>
+                    <isset property="idp.scope" />
+                </not>
+                <isset property="idp.noprompt" />
+                <isfalse value="${idp.properties.present}" />
+            </and>
+        </condition>
+
+        <condition property="idp.write.scope">
+            <!-- We write the scope if we set it, ask for it, or if its supplied -->
+            <or>
+                <isset property="idp.scope" />
+                <isset property="idp.ask.scope" />
+                <isset property="idp.write.scope" />
+            </or>
+        </condition>
+
+        <condition property="idp.generate.altname">
+            <!-- We ask for alt name if there is no alt name and we will call certgen -->
+            <and>
+                <not>
+                    <isset property="idp.uri.subject.alt.name" />
+                </not>
+                <istrue value="${idp.will.call.certgen}" />
+            </and>
+        </condition>
+
+        <condition property="idp.ask.keystore.password">
+            <!-- We ask for keystore password if there is no keystore password and
+                 the relying party (and hence keys) are not there -->
+            <and>
+                <not>
+                    <isset property="idp.keystore.password" />
+                </not>
+                <not>
+                    <istrue value="${idp.relying.party.present}" />
+                </not>
+            </and>
+        </condition>
+
+        <condition property="idp.ask.sealer.password">
+            <!-- We ask for sealer password if there is no sealer password and no sealer -->
+            <and>
+                <not>
+                    <isset property="idp.sealer.password" />
+                </not>
+                <not>
+                    <istrue value="${idp.sealer.present}" />
+                </not>
+            </and>
+        </condition>
+
+        <condition property="idp.ask.sealer.alias">
+            <!-- We ask for sealer alias if there is no sealer alias and no sealer -->
+            <and>
+                <not>
+                    <isset property="idp.sealer.alias" />
+                </not>
+                <not>
+                    <istrue value="${idp.sealer.present}" />
+                </not>
+            </and>
+        </condition>
+
+        <condition property="idp.merge.ldap.properties">
+            <!-- We merge ldap.properties if ldap.merge.properties is set  AND ldap.properties does NOT exist-->
+            <and>
+                <isset property="ldap.merge.properties" />
+                <not>
+                    <istrue value="${ldap.properties.present}" />
+                </not>
+            </and>
+        </condition>
+    </target>
+
+    <target name="target-properties">
+        <TGT>target-properties</TGT>
+        <condition property="idp.ask.target">
+            <and>
+                <not>
+                    <isset property="idp.target.dir" />
+                </not>
+                <not>
+                    <isset property="idp.noprompt" />
+                </not>
+            </and>
+        </condition>
+
+        <condition property="idp.set.target">
+            <and>
+                <not>
+                    <isset property="idp.target.dir" />
+                </not>
+                <isset property="idp.noprompt" />
+            </and>
+        </condition>
+
+        <condition property="idp.src.dir.present">
+            <isset property="idp.src.dir" />
+        </condition>
+
+        <condition property="idp.merge.properties.present">
+            <isset property="idp.merge.properties" />
+        </condition>
+
+        <condition property="nameid.merge.properties.present">
+            <isset property="nameid.merge.properties" />
+        </condition>
+
+        <condition property="services.merge.properties.present">
+            <isset property="services.merge.properties" />
+        </condition>
+
+        <condition property="idp.conf.filemode.present">
+            <isset property="idp.conf.filemode"/>
+        </condition>
+    </target>
+
+    <target name="signing-key" unless="idp.relying.party.present" depends="gethostname, geturisubjectaltname">
+        <TGT>signing-key</TGT>
+        <echo>Generating Signing Key, CN = ${idp.host.name} URI = ${idp.uri.subject.alt.name} ...</echo>
+        <mkdir dir="${idp.target.dir}/credentials"/>
+        <selfsignedcert hostname="${idp.host.name}" privateKeyFile="${idp.target.dir}/credentials/idp-signing.key" certificateFile="${idp.target.dir}/credentials/idp-signing.crt" uriSubjectAltNames="${idp.uri.subject.alt.name}" />
+        <echo>...done</echo>
+    </target>
+
+    <target name="encryption-key" unless="idp.relying.party.present" depends="gethostname, geturisubjectaltname">
+        <TGT>encryption-key</TGT>
+        <echo>Creating Encryption Key, CN = ${idp.host.name} URI = ${idp.uri.subject.alt.name} ...</echo>
+        <mkdir dir="${idp.target.dir}/credentials"/>
+        <selfsignedcert hostname="${idp.host.name}" privateKeyFile="${idp.target.dir}/credentials/idp-encryption.key" certificateFile="${idp.target.dir}/credentials/idp-encryption.crt" uriSubjectAltNames="${idp.uri.subject.alt.name}" />
+        <echo>...done</echo>
+    </target>
+
+    <target name="backchannel-key" unless="idp.relying.party.present" depends="getkeystorepassword, gethostname, geturisubjectaltname">
+        <TGT>backchannel-key</TGT>
+        <echo>Creating Backchannel keystore, CN = ${idp.host.name} URI = ${idp.uri.subject.alt.name} ...</echo>
+        <mkdir dir="${idp.target.dir}/credentials"/>
+        <selfsignedcert hostname="${idp.host.name}" keystoreFile="${idp.target.dir}/credentials/idp-backchannel.p12" certificateFile="${idp.target.dir}/credentials/idp-backchannel.crt" keystorePassword="${idp.keystore.password}" uriSubjectAltNames="${idp.uri.subject.alt.name}" />
+        <echo>...done</echo>
+    </target>
+
+    <target name="sealer" unless="idp.sealer.present" depends="getsealerpassword, getsealeralias">
+        <TGT>sealer</TGT>
+        <echo>Creating cookie encryption key files...</echo>
+        <mkdir dir="${idp.target.dir}/credentials"/>
+        <keystorestrategy keystoreFile="${idp.target.dir}/credentials/sealer.jks" versionFile="${idp.target.dir}/credentials/sealer.kver" keyAlias="${idp.sealer.alias}" keystorePassword="${idp.sealer.password}" />
+        <echo>...done</echo>
+    </target>
+
+    <!--
+     GENERAL V3 TO V3 UPGRADE
+    -->
+
+    <target name="upgrade" depends="editproperties, editservicesproperties, editnameidproperties, editldapproperties, handleeditwebapp">
+        <TGT>upgrade</TGT>
+
+        <!-- conf: copy from dist if not already present -->
+        <mkdir dir="${idp.target.dir}/conf" />
+        <copy todir="${idp.target.dir}/conf">
+            <fileset dir="${idp.target.dir}/dist/conf" includes="**/*">
+                <present present="srconly" targetdir="${idp.target.dir}/conf">
+                    <mapper type="glob" from="*.dist" to="*" />
+                </present>
+            </fileset>
+            <mapper type="glob" from="*.dist" to="*" />
+        </copy>
+
+        <!-- flows: copy from dist if not already present -->
+        <mkdir dir="${idp.target.dir}/flows" />
+        <copy todir="${idp.target.dir}/flows">
+            <fileset dir="${idp.target.dir}/dist/flows" includes="**/*">
+                <present present="srconly" targetdir="${idp.target.dir}/flows">
+                    <mapper type="glob" from="*.dist" to="*" />
+                </present>
+            </fileset>
+            <mapper type="glob" from="*.dist" to="*" />
+        </copy>
+
+        <!-- messages: copy from dist if not already present -->
+        <mkdir dir="${idp.target.dir}/messages" />
+        <copy todir="${idp.target.dir}/messages">
+            <fileset dir="${idp.target.dir}/dist/messages" includes="**/*">
+                <present present="srconly" targetdir="${idp.target.dir}/messages">
+                    <mapper type="glob" from="*.dist" to="*" />
+                </present>
+            </fileset>
+            <mapper type="glob" from="*.dist" to="*" />
+        </copy>
+
+        <!-- views: copy from dist if not already present -->
+        <mkdir dir="${idp.target.dir}/views" />
+        <copy todir="${idp.target.dir}/views">
+            <fileset dir="${idp.target.dir}/dist/views" includes="**/*">
+                <present present="srconly" targetdir="${idp.target.dir}/views">
+                    <mapper type="glob" from="*.dist" to="*" />
+                </present>
+            </fileset>
+            <mapper type="glob" from="*.dist" to="*" />
+        </copy>
+
+        <!-- Other dirs -->
+        <mkdir dir="${idp.target.dir}/logs" />
+    </target>
+
+    <target name="editproperties" depends="gettarget, getentityid" unless="idp.properties.present">
+        <TGT>editproperties</TGT>
+        <mkdir dir="${idp.target.dir}/conf" />
+        <mergeproperties inFile="${idp.target.dir}/dist/conf/idp.properties.dist" outFile="${idp.target.dir}/conf/idp.properties" mergeFile="${idp.merge.properties}" />
+    </target>
+
+    <target name="editservicesproperties" depends="gettarget" if="idp.is.V2" unless="services.properties.present">
+        <TGT>editservicesproperties</TGT>
+        <mkdir dir="${idp.target.dir}/conf" />
+        <mergeproperties inFile="${idp.target.dir}/dist/conf/services.properties.dist" outFile="${idp.target.dir}/conf/services.properties" mergeFile="${services.merge.properties}" />
+    </target>
+
+    <target name="editnameidproperties" depends="gettarget" if="idp.is.V2" unless="nameid.properties.present">
+        <TGT>editnameidproperties</TGT>
+        <mkdir dir="${idp.target.dir}/conf" />
+        <mergeproperties inFile="${idp.target.dir}/dist/conf/saml-nameid.properties.dist" outFile="${idp.target.dir}/conf/saml-nameid.properties" mergeFile="${nameid.merge.properties}" />
+    </target>
+
+    <target name="editldapproperties" depends="gettarget" if="idp.merge.ldap.properties" unless="ldap.properties.present">
+        <TGT>editldapproperties</TGT>
+        <mkdir dir="${idp.target.dir}/conf" />
+        <mergeproperties inFile="${idp.target.dir}/dist/conf/ldap.properties.dist" outFile="${idp.target.dir}/conf/ldap.properties" mergeFile="${ldap.merge.properties}" />
+    </target>
+
+    <target name="metadata-gen" depends="gettarget, getentityid, gethostname, genkeys, upgrade"  unless="idp.metadata.present">
+        <TGT>metadata-gen</TGT>
+        <mkdir dir="${idp.target.dir}/metadata"/>
+        <metadatagenerate dnsName="${idp.host.name}" idpHome="${idp.target.dir}" backChannelCert="${idp.target.dir}/credentials/idp-backchannel.crt" output="${idp.target.dir}/metadata/idp-metadata.xml"/>
+    </target>
+
+    <target name="handleeditwebapp" depends="makeeditwebapp, populateeditwebapp"/>
+
+    <target name="makeeditwebapp">
+        <TGT>makeeditwebapp</TGT>
+        <!-- Create edit-webapp tree -->
+        <mkdir dir="${idp.target.dir}/edit-webapp" />
+        <mkdir dir="${idp.target.dir}/edit-webapp/css" />
+        <mkdir dir="${idp.target.dir}/edit-webapp/images" />
+        <mkdir dir="${idp.target.dir}/edit-webapp/WEB-INF" />
+        <mkdir dir="${idp.target.dir}/edit-webapp/WEB-INF/lib" />
+        <mkdir dir="${idp.target.dir}/edit-webapp/WEB-INF/classes" />
+    </target>
+
+    <target name="populateeditwebapp" unless="idp.properties.present">
+        <TGT>populateeditwebapp</TGT>
+        <copy todir="${idp.target.dir}/edit-webapp/css" failonerror="false">
+            <fileset dir="${idp.target.dir}/webapp/css" />
+        </copy>
+        <copy todir="${idp.target.dir}/edit-webapp/images" failonerror="false">
+            <fileset dir="${idp.target.dir}/webapp/images" />
+        </copy>
+    </target>
+
+    <!--
+     CREATE WAR FILE
+    -->
+    <target name="build-war" depends="gettarget">
+        <!-- no logging -->
+        <echo>Rebuilding ${idp.target.dir}/war/idp.war ...</echo>
+        <copy todir="${idp.target.dir}/webapp" overwrite="true" failonerror="false">
+            <fileset dir="${idp.target.dir}/edit-webapp" />
+        </copy>
+        <!-- build a jar, not war, since it is already fully populated -->
+        <delete file="${idp.target.dir}/war/idp.war" failonerror="false" />
+        <jar destfile="${idp.target.dir}/war/idp.war" basedir="${idp.target.dir}/webapp" />
+        <echo>...done</echo>
+    </target>
+
+    <!-- specify getsource before get target to force target default-->
+    <target name="copy-distribution" depends="init, getsource, gettarget">
+        <TGT>copy-distribution</TGT>
+        <local name="target" />
+        <property name="target" value="${idp.target.dir}/old-${DSTAMP}-${TSTAMP}" />
+
+        <!-- Save old configuration:
+         NOT conf, credentials, flows, logs, messages, metadata, views-->
+        <mkdir dir="${target}" />
+
+        <!-- NOTE - move task appears to be very flaky - at least on windows.  This is why we
+         copy with a force overwrite and then explicitly delete -->
+        <copy todir="${target}/bin" failonerror="false">
+            <fileset dir="${idp.target.dir}/bin" />
+        </copy>
+        <copy todir="${target}/dist" failonerror="false">
+            <fileset dir="${idp.target.dir}/dist" />
+        </copy>
+        <copy todir="${target}/doc" failonerror="false">
+            <fileset dir="${idp.target.dir}/doc" />
+        </copy>
+        <copy todir="${target}/system" failonerror="false">
+            <fileset dir="${idp.target.dir}/system" />
+        </copy>
+        <copy todir="${target}/webapp" failonerror="false">
+            <fileset dir="${idp.target.dir}/webapp" />
+        </copy>
+
+        <!-- Do not delete bin, this preserves user scripts.
+        Delete bin/lib so as to clear up old jar files. -->
+        <delete dir="${idp.target.dir}/bin/lib" failonerror="false" />
+        <delete dir="${idp.target.dir}/dist" failonerror="false" />
+        <delete dir="${idp.target.dir}/doc" failonerror="false" />
+        <mkdir dir="${idp.target.dir}/system"/> <!-- create because it won't exist first time -->
+        <attrib readonly="false">
+            <fileset dir="${idp.target.dir}/system" includes="**/*"/>
+        </attrib>
+        <delete dir="${idp.target.dir}/system" failonerror="false" />
+        <delete dir="${idp.target.dir}/webapp" failonerror="false" />
+
+        <!-- Now copy or create empty as required.
+        Creating an existing file is benign, bin gets updated -->
+
+        <copy todir="${idp.target.dir}/bin" overwrite="true">
+            <fileset dir="${idp.src.dir}/bin"  excludes="**/ant-jetty.xml **/install.*"/>
+        </copy>
+        <mkdir dir="${idp.target.dir}/conf" />
+        <mkdir dir="${idp.target.dir}/credentials" />
+        <copy todir="${idp.target.dir}/dist">
+            <fileset dir="${idp.src.dir}/dist" />
+        </copy>
+        <mkdir dir="${idp.target.dir}/doc" />
+        <copy todir="${idp.target.dir}/doc">
+            <fileset dir="${idp.src.dir}/doc" />
+        </copy>
+
+        <mkdir dir="${idp.target.dir}/flows" />
+        <mkdir dir="${idp.target.dir}/logs" />
+        <mkdir dir="${idp.target.dir}/messages" />
+        <mkdir dir="${idp.target.dir}/metadata" />
+        <copy todir="${idp.target.dir}/system">
+            <fileset dir="${idp.src.dir}/system" />
+        </copy>
+        <mkdir dir="${idp.target.dir}/views" />
+        <mkdir dir="${idp.target.dir}/war" />
+        <mkdir dir="${idp.target.dir}/webapp" />
+        <copy todir="${idp.target.dir}/webapp">
+            <fileset dir="${idp.src.dir}/webapp" />
+        </copy>
+    </target>
+
+    <target name="copy-jetty-distribution" depends="copy-distribution" if="idp.jetty.config">
+        <TGT>copy-jetty-distribution</TGT>
+
+        <!-- save old -->
+        <local name="target" />
+        <property name="target" value="${idp.target.dir}/old-${DSTAMP}-${TSTAMP}" />
+
+        <!--- IDP-626 we do not need to preserve tmp -->
+        <delete failonerror="false"  dir="${idp.target.dir}/jetty-base/tmp"/>
+        <copy todir="${target}/jetty-base" failonerror="false">
+            <fileset dir="${idp.target.dir}/jetty-base" />
+        </copy>
+        <delete failonerror="false" dir="${idp.target.dir}/jetty-base"/>
+
+        <!-- Copy new -->
+        <copy todir="${idp.target.dir}/jetty-base">
+            <fileset dir="${idp.src.dir}/embedded/jetty-base" />
+        </copy>
+        <!-- rename Start.d -->
+        <move file="${idp.target.dir}/jetty-base/start.d" tofile="${idp.target.dir}/jetty-base/start.d.dist"/>
+        <!-- And restore the old one if present -->
+        <copy todir="${idp.target.dir}/jetty-base/start.d" failonerror="false">
+            <fileset dir="${target}/jetty-base/start.d" />
+        </copy>
+        <!-- finally copy the ant file -->
+        <copy file="${idp.src.dir}/bin/ant-jetty.xml" tofile="${idp.target.dir}/bin/ant-jetty.xml" overwrite="true"/>
+    </target>
+
+    <!-- V2 to V3 PrePopulate -->
+
+    <target name="v2v3prepopulate" depends="gettarget, v2detect" if="idp.is.V2">
+        <TGT>v2v3prepopulate</TGT>
+        <echo>
+A V2 Installation has been detected. Configuration will be preserved into
+.v2 folders and appropriate files copied forward.
+        </echo>
+        <!-- rename war to war.v2 -->
+        <copy todir="${idp.target.dir}/war.v2" failonerror="true">
+            <fileset dir="${idp.target.dir}/war" />
+        </copy>
+        <delete dir="${idp.target.dir}/war" failonerror="false" />
+
+        <!-- rename conf to conf.v2 -->
+        <copy todir="${idp.target.dir}/conf.v2" failonerror="true">
+            <fileset dir="${idp.target.dir}/conf" />
+        </copy>
+        <delete dir="${idp.target.dir}/conf" failonerror="false" />
+
+        <!-- delete old lib folder, just avoids confusion -->
+        <delete dir="${idp.target.dir}/lib" failonerror="false" />
+
+        <!-- copy selected files from conf.v2 -->
+        <mkdir dir="${idp.target.dir}/conf" />
+        <copy file="${idp.target.dir}/conf.v2/attribute-filter.xml" tofile="${idp.target.dir}/conf/attribute-filter.xml" failonerror="false" />
+        <copy file="${idp.target.dir}/conf.v2/attribute-resolver.xml" tofile="${idp.target.dir}/conf/attribute-resolver.xml" failonerror="false" />
+        <copy file="${idp.target.dir}/conf.v2/relying-party.xml" tofile="${idp.target.dir}/conf/metadata-providers.xml" failonerror="false" />
+        <copy file="${idp.target.dir}/conf.v2/relying-party.xml" tofile="${idp.target.dir}/conf/relying-party.xml" failonerror="false" />
+
+        <!-- Signal we're a legacy RP config -->
+        <echo file="${services.merge.properties}" append="yes">
+            idp.service.relyingparty.resources = shibboleth.LegacyRelyingPartyResolverResources
+        </echo>
+        <echo file="${nameid.merge.properties}" append="yes">
+            idp.nameid.saml2.legacyGenerator = shibboleth.LegacySAML2NameIDGenerator
+            idp.nameid.saml1.legacyGenerator = shibboleth.LegacySAML1NameIdentifierGenerator
+        </echo>
+    </target>
+
+    <target name="v2detect" depends="gettarget">
+        <TGT>v2detect</TGT>
+        <available property="idp.properties.present" file="${idp.target.dir}/conf/idp.properties" />
+        <available property="idp.relying.party.present" file="${idp.target.dir}/conf/relying-party.xml" />
+        <condition property="idp.is.V2">
+            <!-- This is V2 as there is relying-party.xml and not idp.properties -->
+            <and>
+                <isfalse value="${idp.properties.present}" />
+                <istrue value="${idp.relying.party.present}" />
+            </and>
+        </condition>
+    </target>
+
+    <target name="reprotect" depends="gettarget">
+        <!-- See IDP-487 -->
+        <chmod perm="755" dir="${idp.target.dir}/bin" includes="**/*.sh"/>
+        <chmod perm="600" dir="${idp.target.dir}/credentials" includes="**/*.key"/>
+        <chmod perm="${idp.conf.filemode}" dir="${idp.target.dir}/conf" includes="**/*"/>
+        <chmod perm="444" dir="${idp.target.dir}/system" includes="**/*"/>
+        <attrib readonly="true">
+            <fileset dir="${idp.target.dir}/system" includes="**/*"/>
+        </attrib>
+    </target>
+
+    <target name="tidy" unless="idp.no.tidy">
+        <TGT>tidy</TGT>
+        <delete file="${idp.merge.properties}" failonerror="false" />
+        <delete file="${services.merge.properties}" failonerror="false" />
+        <delete file="${nameid.merge.properties}" failonerror="false" />
+        <delete file="${ldap.merge.properties}" failonerror="false" />
+        <delete file="${idp.property.file}" failonerror="false" />
+    </target>
+
+</project>
diff -rupN shibboleth-idp/bin/install.bat shibboleth-idp/bin/install.bat
--- shibboleth-idp/bin/install.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/install.bat	2019-07-01 13:03:37.381963824 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
-"%~dp0\ant.bat" %* install
+@echo off
+setlocal
+
+"%~dp0\ant.bat" %* install
diff -rupN shibboleth-idp/bin/keygen.bat shibboleth-idp/bin/keygen.bat
--- shibboleth-idp/bin/keygen.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/keygen.bat	2019-07-01 13:03:37.381963824 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
-"%~dp0\runclass.bat" net.shibboleth.utilities.java.support.security.SelfSignedCertificateGenerator %*
+@echo off
+setlocal
+
+"%~dp0\runclass.bat" net.shibboleth.utilities.java.support.security.SelfSignedCertificateGenerator %*
diff -rupN shibboleth-idp/bin/reload-metadata.bat shibboleth-idp/bin/reload-metadata.bat
--- shibboleth-idp/bin/reload-metadata.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/reload-metadata.bat	2019-07-01 13:03:37.413962541 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
-"%~dp0\runclass.bat" -Dnet.shibboleth.idp.cli.arguments=net.shibboleth.idp.cli.ReloadMetadataArguments net.shibboleth.idp.cli.CLI %*
+@echo off
+setlocal
+
+"%~dp0\runclass.bat" -Dnet.shibboleth.idp.cli.arguments=net.shibboleth.idp.cli.ReloadMetadataArguments net.shibboleth.idp.cli.CLI %*
diff -rupN shibboleth-idp/bin/reload-service.bat shibboleth-idp/bin/reload-service.bat
--- shibboleth-idp/bin/reload-service.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/reload-service.bat	2019-07-01 13:03:37.413962541 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
-"%~dp0\runclass.bat" -Dnet.shibboleth.idp.cli.arguments=net.shibboleth.idp.cli.ReloadServiceArguments net.shibboleth.idp.cli.CLI %*
+@echo off
+setlocal
+
+"%~dp0\runclass.bat" -Dnet.shibboleth.idp.cli.arguments=net.shibboleth.idp.cli.ReloadServiceArguments net.shibboleth.idp.cli.CLI %*
diff -rupN shibboleth-idp/bin/runclass.bat shibboleth-idp/bin/runclass.bat
--- shibboleth-idp/bin/runclass.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/runclass.bat	2019-07-01 13:03:37.413962541 -0400
@@ -1,29 +1,29 @@
-@echo off
-setlocal
-
-REM We need a JVM
-if not defined JAVA_HOME  (
-  echo Error: JAVA_HOME is not defined.
-  exit /b
-)
-
-if not defined JAVACMD (
-  set JAVACMD="%JAVA_HOME%\bin\java.exe"
-)
-
-if not defined IDP_BASE_URL (
-  set IDP_BASE_URL="http://localhost/idp"
-)
-
-if not exist %JAVACMD% (
-  echo Error: JAVA_HOME is not defined correctly.
-  echo Cannot execute %JAVACMD%
-  exit /b
-)
-
-REM add in the dependency .jar files
-set LOCALCLASSPATH=%~dp0lib\*;%~dp0..\webapp\WEB-INF\lib\*;%JAVA_HOME%\lib\classes.zip;%CLASSPATH%
-
-REM Go to it !
-
-%JAVACMD% -cp "%LOCALCLASSPATH%" -Dnet.shibboleth.idp.cli.baseURL=%IDP_BASE_URL% %*
+@echo off
+setlocal
+
+REM We need a JVM
+if not defined JAVA_HOME  (
+  echo Error: JAVA_HOME is not defined.
+  exit /b
+)
+
+if not defined JAVACMD (
+  set JAVACMD="%JAVA_HOME%\bin\java.exe"
+)
+
+if not defined IDP_BASE_URL (
+  set IDP_BASE_URL="http://localhost/idp"
+)
+
+if not exist %JAVACMD% (
+  echo Error: JAVA_HOME is not defined correctly.
+  echo Cannot execute %JAVACMD%
+  exit /b
+)
+
+REM add in the dependency .jar files
+set LOCALCLASSPATH=%~dp0lib\*;%~dp0..\webapp\WEB-INF\lib\*;%JAVA_HOME%\lib\classes.zip;%CLASSPATH%
+
+REM Go to it !
+
+%JAVACMD% -cp "%LOCALCLASSPATH%" -Dnet.shibboleth.idp.cli.baseURL=%IDP_BASE_URL% %*
diff -rupN shibboleth-idp/bin/seckeygen.bat shibboleth-idp/bin/seckeygen.bat
--- shibboleth-idp/bin/seckeygen.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/seckeygen.bat	2019-07-01 13:03:37.413962541 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
-"%~dp0\runclass.bat" net.shibboleth.utilities.java.support.security.BasicKeystoreKeyStrategyTool %*
+@echo off
+setlocal
+
+"%~dp0\runclass.bat" net.shibboleth.utilities.java.support.security.BasicKeystoreKeyStrategyTool %*
diff -rupN shibboleth-idp/bin/status.bat shibboleth-idp/bin/status.bat
--- shibboleth-idp/bin/status.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/status.bat	2019-07-01 13:03:37.413962541 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
-"%~dp0\runclass.bat" -Dnet.shibboleth.idp.cli.arguments=net.shibboleth.idp.cli.StatusArguments net.shibboleth.idp.cli.CLI %*
+@echo off
+setlocal
+
+"%~dp0\runclass.bat" -Dnet.shibboleth.idp.cli.arguments=net.shibboleth.idp.cli.StatusArguments net.shibboleth.idp.cli.CLI %*
diff -rupN shibboleth-idp/bin/version.bat shibboleth-idp/bin/version.bat
--- shibboleth-idp/bin/version.bat	2018-05-14 23:49:56.000000000 -0400
+++ shibboleth-idp/bin/version.bat	2019-07-01 13:03:37.413962541 -0400
@@ -1,4 +1,4 @@
-@echo off
-setlocal
-
+@echo off
+setlocal
+
 "%~dp0\runclass.bat" net.shibboleth.idp.Version
\ No newline at end of file
